48 ：如果需要精确的答案，请避免使用float和double

    float和double主要为了科学计算和工程计算而设计，执行二进制浮点运算，这是为了在广泛的数值范围上提供较为精确的快速近似计算而精心设计的。然而，它们没有提供完全精确的结果，所以不适合用于需要精确结果的场合，尤其是货币计算。
  解决方法
1使用BigDecimal类
    使用BigDecimal的缺点是：1.与基本类型相比，不方便（需要创建BigDecimal对象）；2.速度慢
2使用int或者long，取决于涉及的数值大小，同时要自己处理十进制小数，以分为单位，而不是以元为单位计算，就可以使用int来处理

    对于需要精确答案的计算，不能使用float或者double，BigDecimal允许完全控制舍入，如果业务要求涉及多种舍入方式，使用BigDecimal很方便，如果性能很关键，涉及的数值不大，就可以使用int或者float，如果数值范围没有超过9位十进制数字，可以使用int，如果不超过18位数字，使用long，如果数值可能超过18位，就必须用BigDecimal。

49 ：基本类型优先于装箱基本类型

Java的类型 分两种 1 基本类型， 2 引用类型
    装箱基本类型属于 引用类型

基本类型和装箱基本类型之间的三个主要区别：
    1.基本类型只有值，而装箱基本类型具有与它们的值不同的同一性（两个装箱基本类型可以具有相同的值和不同的同一性）
    2.基本类型只有功能完备的值，而每个装箱基本类型除了它对应的基本类型的所有功能值之外，还有个非功能值：null
    3.基本类型通常比装箱基本类型更节省空间和时间。

    Comparator<Integer> naturalOrder = new Comparator<Integer>() {
        public int compare(Integer first, Integer second) {
            return first < second ? -1 : (first == second ? 0 : 1);
        }
    };
    如果打印
        naturalOrder.Compare(new Integer(42), new Integer(42));
    的值，结果不是期望的0，而是1，表明第一个Integer值大于第二个。
    问题出现在执行first == second，它在两个对象引用上执行同一性比较，如果first和second引用表示同一个int值得不同Integer实例，这个比较操作会返回false，比较器会错误地返回1，对装箱基本类型运用==操作符几乎总是错误的。
    修正的方法是添加两个局部变量，保存对应于first和second的基本类型int值 拆箱比较。

    将Integer和int进行比较，装箱基本类型自动拆箱，如果null对象被自动拆箱，就只能得到NullPointException了。

    适合使用装箱基本类型的地方：
    1.作为集合中的元素，键和值。
    2.在参数化类型中，必须使用装箱基本类型作为类型参数。
    3.在进行反射方法调用时，必须使用装箱基本类型。