50 ：如果其他类型更合适，则尽量避免使用字符串

1.字符串不适合代替其他的值类型。只有当数据确实是文本信息时，才应该使用字符串，如果是数值，就应该被转换为适当的数值类型，如果是一个“是-或-否”的问题答案，应该被转换为boolean类型，如果是一个对象，应该使用对象引用来引用它。
2.字符串不适合代替枚举类型：枚举类型比字符串更加适合用来表示枚举类型的常量。
3.字符串不适合代替聚集类型。如果一个实体有多个组件，用字符串来表示这个实体通常不恰当，String compundKey = className + "#" + i.next();
    更好的做法是编写一个类来描述这个数据集，通常是一个私有的静态成员类。
4.字符串不适合代替能力表。有时候，字符串被用于对某种功能进行授权访问，考虑设计一个提供线程局部变量的机制，这个机制提供的变量在每个线程中都有自己的值。
如：
public class ThreadLocal {
    private ThreadLocal() {}
    public static void set(String key, Object value);
    public static Object get(String key);
}
这种方法的问题在于，字符串键代表一个共享的全局命名空间，要使这种办法可行，客户端提供的字符串必须是唯一的，如果使用了相同的字符串，实际上就共享了这个变量。若是业务需求需要共享某些数据，可以如此运用。
如47条 类库中有专门的方案，java.util.ThreadLocal提供的API正是这样的
public T get() {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);//将自身作为键来取得线程局部变量值
            if (e != null) {
                @SuppressWarnings("unchecked")
                T result = (T)e.value;
                return result;
            }
        }
        return setInitialValue();
}
总之：如果有更合适的数据类型，避免使用字符串来表示对象。若使用不当，字符串会比其他类型更加笨拙、不灵活、更慢、也更容易出错。

51 ：当心字符串连接的性能

    字符串连接操作符（+）是把多个字符串合并为一个字符串的便利途径。要想产生单独一行的输出，或者构造一个字符串来表示一个较小的、大小固定的对象，使用连接操作符是非常合适的，但是它不适合运用在大规模的场景中。为连接n个字符串而重复地使用字符串连接操作符，需要n的平方级的时间。这是由于字符串不可变而导致的不幸结果。当两个字符串被连接在一起时，他们的内容都要被拷贝。

    解决方案： 使用StringBuffer替代String，时间复杂度n 。所以项目数越大，性能的差别会越显著。

    总结：不要使用字符串连接操作符来合并多个字符串，除非性能无关紧要。相反，应该使用StringBuffer的append方法。