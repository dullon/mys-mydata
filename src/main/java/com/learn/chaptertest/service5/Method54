54 ： 谨慎地使用本地方法
JNI (java native interface) 允许java 应用程序调用本地方法
本地方法：本地程序设计语言编写的特殊方法（比如C 或C++ 代码）,并返回到java设计语言

本地方法主要提供三种用途：
1 访问“特定于平台的能力”的机制，比如 注册表、文件锁
2 访问遗留代码库的能力，可以访问遗留数据
3 可以通过本地语言编写注重性能的代码，提升系统性能

但使用本地方法提升性能的做法不值得提倡，1.3版本以前是可以的，随着jvm 速度越来越快，这么做其实并不是很划算
使用本地方法有一些严重缺陷：
1本地语言不是安全的，本地方法不能免受内存损坏错误的影响
2本地方法是平台相关的，不方便移植
3更难调试
4进入退出本地方法需要相关的固定开销（本地代码做少量工作，性能会降低）
5胶合本地代码的程序单调乏味，难以理解

尽可能少使用本地方法，注意全面测试，本地方法的bug 可能破坏整个系统。


55 ： 谨慎地进行优化

优化的弊大于利，特别是不成熟的优化。在优化过程中，产生的软件可能既不快速，也不正确，而且还不容易修正。

不要因为性能而牺牲合理的结构。要努力编写好的程序而不足快的栏序。如果好的程序不够快，它的结构将使它可以得到优化。好的程序体现了信息隐藏 (information hiding）的原则：只要有可能，它们就会把设计决策集中在单个模块中，因此，可以改变单个决策，而不会影响到系统的其他部分（见第13条：使类和成员的可访问性最小化）。

这并不意味着在完成程序之前就可以忽略性能问题。实现上的问题可以通过后期的优化而得到修正，但是，遍布全局并且限制性能的结构缺陷几乎是不可能被改正的．除非重新编写系统。在系统完成之后再改变设计的某个基本方面，会导致系统的结构很不好，从而难以维护和改进。因此，必须在设计过程中考虑到性能间题。

 1 努力避免那些限制性能的设计决策。当一个系统设计完成之后，其中最难以更改的组件是那些指定了模块之间交互关系以及模块与外界交互关系的组件。在这些设计组件之中，最主要的是API线路层（wire-Ievel）协议以及永久数据格式。这些设计组件不仅在事后难以甚至不可能改变，而且它们都有可能对系统本该达到的性能产生严重的限制。
 2 要考虑API设计决策的性能后果。使公有的类型成为可变的（mutable )。这可能会导致大量不必要的保护性拷贝（见第39条：必要时进行保护性拷贝 )。同样地，在适合使用复合模式的公有类中使用继承，会把这个类与它的超类永远地束缚在一起，从而人为地限制了子类的性能（见第16条：复合优先于继承)。最后一个例子，在API中使用实现类型而不是接口，会把你束缚在一个具休的实现上，即使将来出现更快的实现你也无法使用（见第52条：通过接口引用对象）。

API设计对于性能的影响是非常实际的。幸运的是，一般而言，好的API设计也会带来好的性能。为获得好的性能而对API进行包装，这是一种非常不好的想法。你对API进行包装的性能因素可能会在平台未来的发行版本中，或者在将来的底层软件中不复存在，但是披包装的API以及由它引起的问题将永远困扰着你。

一旦谨慎地设计了程序，井且产生了一个清晰、简明、结构良好的实现，那么就到了该考虑优化的时候了，假定此时你对于程序的性能还不满意。在每次试图做优化之前和之后，要对性能进行测量。

性能剖析工具有助于你决定应该把优化的重心放在哪里。这样的工具可以为你提供运行时的信息，比如每个方法大致上花费了多少时间、它被调用多少次。除了确定优化的重点之外，它还可以警告你是否需要改变算法。

总而言之，不要费力去编写快速的程序——应该努力编写好的程序，速度自然会随之而来。在设计系统的时候，特别是在设计API、线路层协议和永久数据格式的时候，一定要考虑性能的因素。当构建完系统之后，要测量它的性能。如果它足够快，你的任务就完成了。如果不够快，则可以在性能剖析器的帮助下，找到问题的根源，然后设法优化系统中相关的部分。第一个步骤是检查所选择的算法：再多的低层优化也无法弥补算法的选择不当。必要时重复这个过程，在每次改变之后都要测量性能，直到满意为止。


56 ：遵守普遍接受的命名惯例

不严格的讲，这些命名惯例分为两大类：字面的和语法的。
字面的命名惯例比较少，但也涉及包，类，方法，域和类型变量。

包的名称应该是层次状的，用句号分隔每个部分。任何将在你的组织之外使用的包，其名称都应该以你的组织的Internet域名开头，并且将
顶级域名放在前面，例如com.sun ，gov.nsa。标准类库和一些可选的包，其名称以java和javax开头，这属于这一规则的例外。

类和接口的名称，包括枚举和注解类型的名称，都应该包括一个或者多个单词，每个单词的首字母大写，例如Timer和TimerTask。应该尽量
避免用缩写，除非是一些首字母缩写和一些通用的缩写，比如max和min。

方法和域的名称与类和接口的名称一样，都遵守相同的字面惯例，只不过方法或者域的名称的第一个字母应该小写，例如remove，ensureCapacity。

常量域则全是大写，它的名称应该包含一个或者多个大写的单词，中间用下划线相连，例如VALUES，NEGATIVE_INFINITY。常量域是静态的final域，它的值是不可变的。

类型参数名称通常由单个字母组成。这个字母通常是以下五种类型之一：
T代表任意的类型 （泛型）， E表示集合的元素类型 （集合应用） ，  K和V表示映射的键和值的类型 （map应用）， X表示异常的类型。

特别注意： boolean 类型 尽量避免is 开头，否则部分框架解析会引起序列化错误.定义为基本数据类型boolean isFlag;的属性，它的方法也是isFlag()，RPC进而抛出异常。Mybatis框架在反向解析的时候，“以为”对应的属性名称是flag，导致属性获取不到，进而抛出异常。