45 ：将局部变量的作用域最小化

    将局部变量的作用域最小化，可以增强个代码的可读性和可维护性，并降低出错的可能性。
    方法：

    1.在第一次使用它的地方声明。如果变量在使用之前声明，对于试图理解程序功能的读者来说，多了一个分散注意力的因素，等到用到该变量的时候，可能已经记不起变量的类型或者初始值了。
        过早的声明会使它的作用域过早的扩展，而且结束的也过晚了。
    2.几乎每个局部变量的声明都应该包含一个初始化表达式。如果还没有足够的信息对一个变量进行有意义的初始化，就应该推迟这个声明，直到可以初始化为止。例外，try-catch语句，如果一个变量被一个方法初始化，而这个方法有可能抛出一个受检异常，该变量就必须在try块的内部被初始化，如果变量的值在try块外部被使用，它就必须在try块之前被声明。
        循环提供机会将变量的作用域最小化，for循环允许声明循环变量，它们的作用域被限定在正好需要的范围之内。for循环优先于while循环。

    3.使方法小而集中。如果两个操作合并到同一个方法，与另一个操作相关的局部变量就有可能会出现在执行另一个操作的代码范围之内。为了防止这种情况，把两个操作分到两个方法中，每个方法执行一个操作。


46 ：for-each循环优先于传统的for循环

    for-each循环通过完全隐藏迭代器或者索引变量，避免混乱和出错的可能，适用于集合和数组和任何实现Iterable接口的对象。
    使用嵌套for-each循环更简洁，代码优雅，性能略胜于普通for循环，因为它对数组索引的边界值只计算一次。
    无法使用for-each循环的情况：

    1.过滤，需要遍历集合并删除选定的元素，需要显式的迭代器，以便调用它的remove方法

    2.转换，需要遍历列表或者数组，并取代它部分或者全部元素值，需要列表迭代器或者数组索引，以便设定元素的值

    3.平行迭代，并行地遍历多个集合，需要显式地控制迭代器或者索引变量，以便所有迭代器和索引变量都可以得到同步前移（像上述第一个代码 块那样）


47 ： 了解和使用类库

1使用标准类库，可以充分利用专家的知识，使用他人的经验；
2不必浪费时间，提高效率；
3标准库会不停的优化，性能会随着时间的推移而提高，我们不必做任何操作，坐享其成；
4大家都使用标准类库，我们的代码就融入主流，用的人越多，解决问题就越接近，解决的就越快。
5对于工具类的和其他的标准类库，我们没必要自己去造轮子，拿来主义就很好。我们平常最好多了解 java.lang,java.util,java.io,java.util.concurrent,java.nio这些包。
