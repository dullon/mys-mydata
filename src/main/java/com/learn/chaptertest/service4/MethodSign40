
40 ： 谨慎设计方法签名

1.谨慎地选择方法的名称。遵循标准的命名习惯。

2.不过于追求提供便利的方法。方法太多会使类难以学习、使用、文档化、测试和维护。

3.避免过长的参数列表。目标是四个参数以下。

缩短参数列表的方法：

（1）把方法分解成多个方法，可能会导致方法过多， 通过提升方法正交性，可以减少方法数目。java.util.List接口，它没有提供在子列表中查找元素第一个索引和最后一个索引的方法，这个两个方法需要三个参数，它提供了subList方法，需要两个参数，还有indexOf和lastIndexOf方法，需要一个参数。而且subList方法可以与其他针对List实例进行操作的方法结合起来，在子列表上执行任意的计算，这样得到的API具有很高的功能重量比。

（2）创建辅助类，用来保存参数的分组，一般是静态成员类。

（3）采用Builder模式，如果方法带多个参数，尤其是有些是可选的时候，定义一个对象表示所有参数，并允许客户端在对象上进行多次setter调用，每次调用设置一个参数，一旦设置了需要的参数，调用执行方法。

4.对于参数类型，要优先使用接口而不是类。

5.对于boolean参数，要优先使用两个元素的枚举类型，使代码更容易阅读和编写。

41 ： 慎用重载

对于API来说，普通用户根本不知道＂对于一组给定的参数，其中那个重载方法将会被调用＂，那么这样的API就很容易出错。而且这类错误只有等到程序出现非常怪异的行为的时候才能被发现，而且不容易诊断错误。因此，尽量避免胡乱地使用重载机制。

安全而保守的策略是：永远不要导出两个具有相同参数数目的重载方法。如果方法使用可变参数，根本不要重载它。

这里要特别注意的是类的构造器，因为你不可能吧构造器重新命名！可以考虑导出静态工厂。对于导出多个具有相同参数数目的重载方法时至少有一个对应参数在两个重载方法中具有"根本不同的类型"。

42 ： 慎用可变参数

不必改造具有final数组参数的每个方法；只当确实是在数量不定的值上执行调用时才使用可变参数。

每次调用可变参数方法都会进行一次数组分配和初始化。
解决办法——重载：
假设确定对某个方法95%的调用会有3个或者更少的参数，就声明该方法的5个重载，每个重载方法带有0至3个普通参数，当参数的数目超过3个时，就使用一个可变参数方法。（0,1,2,3，n）五种参数重载。
